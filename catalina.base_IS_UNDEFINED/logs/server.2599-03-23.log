16:32:26.954 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
16:32:26.970 [main] INFO  com.example.demo.DemoApplication - Starting DemoApplication using Java 17.0.11 with PID 74215 (/Users/bootscoder/Downloads/redispractice/demo/target/classes started by bootscoder in /Users/bootscoder/Downloads/redispractice/demo)
16:32:26.970 [main] DEBUG com.example.demo.DemoApplication - Running with Spring Boot v3.4.4, Spring v6.2.5
16:32:26.971 [main] INFO  com.example.demo.DemoApplication - No active profile set, falling back to 1 default profile: "default"
16:32:27.311 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
16:32:27.313 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
16:32:27.321 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 2 ms. Found 0 Redis repository interfaces.
16:32:27.547 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 9999 (http)
16:32:27.550 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-9999"]
16:32:27.551 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
16:32:27.551 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.39]
16:32:27.566 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/bootscoder] - Initializing Spring embedded WebApplicationContext
16:32:27.566 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 581 ms
16:32:27.804 [main] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
16:32:28.003 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 14 endpoints beneath base path '/actuator'
16:32:28.024 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-9999"]
16:32:28.030 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 9999 (http) with context path '/bootscoder'
16:32:28.038 [main] INFO  com.example.demo.DemoApplication - Started DemoApplication in 1.202 seconds (process running for 1.505)
16:32:28.258 [RMI TCP Connection(2)-192.168.1.3] INFO  o.a.c.c.C.[Tomcat].[localhost].[/bootscoder] - Initializing Spring DispatcherServlet 'dispatcherServlet'
16:32:28.259 [RMI TCP Connection(3)-192.168.1.3] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
16:32:28.259 [RMI TCP Connection(2)-192.168.1.3] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
16:32:28.260 [RMI TCP Connection(2)-192.168.1.3] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
16:32:28.988 [RMI TCP Connection(3)-192.168.1.3] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@18bdb505
16:32:28.999 [RMI TCP Connection(3)-192.168.1.3] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
16:33:01.092 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
16:33:01.112 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
16:33:01.176 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
16:33:04.236 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
16:34:01.049 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
16:34:01.051 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
16:34:01.099 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
16:34:03.857 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
16:35:01.046 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
16:35:01.048 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
16:35:01.097 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
16:35:04.598 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
16:36:01.060 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
16:36:01.063 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
16:36:01.113 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
16:36:04.258 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
16:37:01.051 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
16:37:01.053 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
16:37:01.102 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
16:37:03.759 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
16:38:01.059 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
16:38:01.061 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
16:38:01.113 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
16:38:01.399 [SpringApplicationShutdownHook] INFO  o.s.boot.web.embedded.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
16:38:03.411 [tomcat-shutdown] INFO  o.s.boot.web.embedded.tomcat.GracefulShutdown - Graceful shutdown complete
16:38:04.409 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
16:38:04.546 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
16:38:04.555 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
16:38:06.010 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
16:38:06.025 [main] INFO  com.example.demo.DemoApplication - Starting DemoApplication using Java 17.0.11 with PID 74534 (/Users/bootscoder/Downloads/redispractice/demo/target/classes started by bootscoder in /Users/bootscoder/Downloads/redispractice/demo)
16:38:06.025 [main] DEBUG com.example.demo.DemoApplication - Running with Spring Boot v3.4.4, Spring v6.2.5
16:38:06.025 [main] INFO  com.example.demo.DemoApplication - No active profile set, falling back to 1 default profile: "default"
16:38:06.349 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
16:38:06.350 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
16:38:06.359 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 2 ms. Found 0 Redis repository interfaces.
16:38:06.556 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 9999 (http)
16:38:06.560 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-9999"]
16:38:06.560 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
16:38:06.560 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.39]
16:38:06.575 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/bootscoder] - Initializing Spring embedded WebApplicationContext
16:38:06.575 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 538 ms
16:38:06.792 [main] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
16:38:06.991 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 14 endpoints beneath base path '/actuator'
16:38:07.012 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-9999"]
16:38:07.018 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 9999 (http) with context path '/bootscoder'
16:38:07.027 [main] INFO  com.example.demo.DemoApplication - Started DemoApplication in 1.126 seconds (process running for 1.341)
16:38:07.417 [RMI TCP Connection(2)-192.168.1.3] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
16:38:07.418 [RMI TCP Connection(3)-192.168.1.3] INFO  o.a.c.c.C.[Tomcat].[localhost].[/bootscoder] - Initializing Spring DispatcherServlet 'dispatcherServlet'
16:38:07.418 [RMI TCP Connection(3)-192.168.1.3] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
16:38:07.420 [RMI TCP Connection(3)-192.168.1.3] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 2 ms
16:38:08.155 [RMI TCP Connection(2)-192.168.1.3] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5a296136
16:38:08.160 [RMI TCP Connection(2)-192.168.1.3] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
16:39:01.122 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
16:39:01.151 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
16:39:01.240 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
16:39:01.459 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储所有用户数据到 Redis key: users
16:39:01.507 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:1，用户ID: 1
16:39:01.557 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:2，用户ID: 2
16:39:01.604 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:3，用户ID: 3
16:39:01.649 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:4，用户ID: 4
16:39:01.698 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:5，用户ID: 5
16:39:01.749 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:6，用户ID: 6
16:39:01.795 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:7，用户ID: 7
16:39:01.869 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:8，用户ID: 8
16:39:01.913 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:9，用户ID: 9
16:39:01.960 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:10，用户ID: 10
16:39:02.004 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:11，用户ID: 11
16:39:02.050 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:12，用户ID: 12
16:39:02.094 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:13，用户ID: 13
16:39:02.149 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:14，用户ID: 14
16:39:02.204 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:15，用户ID: 15
16:39:02.252 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:16，用户ID: 16
16:39:02.300 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:17，用户ID: 17
16:39:02.346 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:18，用户ID: 18
16:39:02.392 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:19，用户ID: 19
16:39:02.447 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:20，用户ID: 20
16:39:02.496 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:21，用户ID: 21
16:39:02.547 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:22，用户ID: 22
16:39:02.592 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:23，用户ID: 23
16:39:02.642 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:1， field: 1， 用户ID: 1
16:39:02.687 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:2， field: 2， 用户ID: 2
16:39:02.732 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:3， field: 3， 用户ID: 3
16:39:02.777 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:4， field: 4， 用户ID: 4
16:39:02.824 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:5， field: 5， 用户ID: 5
16:39:02.870 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:6， field: 6， 用户ID: 6
16:39:02.915 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:7， field: 7， 用户ID: 7
16:39:02.959 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:8， field: 8， 用户ID: 8
16:39:03.005 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:9， field: 9， 用户ID: 9
16:39:03.048 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:0， field: 10， 用户ID: 10
16:39:03.091 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:1， field: 11， 用户ID: 11
16:39:03.135 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:2， field: 12， 用户ID: 12
16:39:03.182 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:3， field: 13， 用户ID: 13
16:39:03.226 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:4， field: 14， 用户ID: 14
16:39:03.273 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:5， field: 15， 用户ID: 15
16:39:03.317 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:6， field: 16， 用户ID: 16
16:39:03.367 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:7， field: 17， 用户ID: 17
16:39:03.411 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:8， field: 18， 用户ID: 18
16:39:03.456 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:9， field: 19， 用户ID: 19
16:39:03.500 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:0， field: 20， 用户ID: 20
16:39:03.545 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:1， field: 21， 用户ID: 21
16:39:03.589 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:2， field: 22， 用户ID: 22
16:39:03.633 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:3， field: 23， 用户ID: 23
16:39:03.633 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
16:39:46.879 [SpringApplicationShutdownHook] INFO  o.s.boot.web.embedded.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
16:41:09.531 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
16:41:09.547 [main] INFO  com.example.demo.DemoApplication - Starting DemoApplication using Java 17.0.11 with PID 74586 (/Users/bootscoder/Downloads/redispractice/demo/target/classes started by bootscoder in /Users/bootscoder/Downloads/redispractice/demo)
16:41:09.547 [main] DEBUG com.example.demo.DemoApplication - Running with Spring Boot v3.4.4, Spring v6.2.5
16:41:09.547 [main] INFO  com.example.demo.DemoApplication - No active profile set, falling back to 1 default profile: "default"
16:41:09.881 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
16:41:09.885 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
16:41:09.894 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 2 ms. Found 0 Redis repository interfaces.
16:41:10.105 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 9999 (http)
16:41:10.109 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-9999"]
16:41:10.110 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
16:41:10.110 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.39]
16:41:10.126 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/bootscoder] - Initializing Spring embedded WebApplicationContext
16:41:10.126 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 566 ms
16:41:10.367 [main] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
16:41:10.553 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 14 endpoints beneath base path '/actuator'
16:41:10.573 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-9999"]
16:41:10.579 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 9999 (http) with context path '/bootscoder'
16:41:10.588 [main] INFO  com.example.demo.DemoApplication - Started DemoApplication in 1.166 seconds (process running for 1.422)
16:41:10.895 [RMI TCP Connection(2)-192.168.1.3] INFO  o.a.c.c.C.[Tomcat].[localhost].[/bootscoder] - Initializing Spring DispatcherServlet 'dispatcherServlet'
16:41:10.895 [RMI TCP Connection(3)-192.168.1.3] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
16:41:10.895 [RMI TCP Connection(2)-192.168.1.3] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
16:41:10.896 [RMI TCP Connection(2)-192.168.1.3] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
16:41:11.982 [RMI TCP Connection(3)-192.168.1.3] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@70bcfda7
16:41:11.987 [RMI TCP Connection(3)-192.168.1.3] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
16:42:01.011 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
16:42:01.029 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
16:42:01.120 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
16:42:01.366 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储所有用户数据到 Redis key: users
16:42:01.419 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:1，用户ID: 1
16:42:01.473 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:2，用户ID: 2
16:42:01.531 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:3，用户ID: 3
16:42:01.585 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:4，用户ID: 4
16:42:01.640 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:5，用户ID: 5
16:42:01.694 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:6，用户ID: 6
16:42:01.749 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:7，用户ID: 7
16:42:01.803 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:8，用户ID: 8
16:42:01.860 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:9，用户ID: 9
16:42:01.914 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:10，用户ID: 10
16:42:01.968 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:11，用户ID: 11
16:42:02.022 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:12，用户ID: 12
16:42:02.079 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:13，用户ID: 13
16:42:02.133 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:14，用户ID: 14
16:42:02.208 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:15，用户ID: 15
16:42:02.260 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:16，用户ID: 16
16:42:02.315 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:17，用户ID: 17
16:42:02.381 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:18，用户ID: 18
16:42:02.434 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:19，用户ID: 19
16:42:02.497 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:20，用户ID: 20
16:42:02.551 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:21，用户ID: 21
16:42:02.606 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:22，用户ID: 22
16:42:02.664 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:23，用户ID: 23
16:42:02.725 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:1， field: 1， 用户ID: 1
16:42:02.781 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:2， field: 2， 用户ID: 2
16:42:02.833 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:3， field: 3， 用户ID: 3
16:42:02.888 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:4， field: 4， 用户ID: 4
16:42:02.942 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:5， field: 5， 用户ID: 5
16:42:02.995 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:6， field: 6， 用户ID: 6
16:42:03.048 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:7， field: 7， 用户ID: 7
16:42:03.119 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:8， field: 8， 用户ID: 8
16:42:03.226 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:9， field: 9， 用户ID: 9
16:42:03.318 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:0， field: 10， 用户ID: 10
16:42:03.404 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:1， field: 11， 用户ID: 11
16:42:03.459 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:2， field: 12， 用户ID: 12
16:42:03.519 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:3， field: 13， 用户ID: 13
16:42:03.580 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:4， field: 14， 用户ID: 14
16:42:03.636 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:5， field: 15， 用户ID: 15
16:42:03.693 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:6， field: 16， 用户ID: 16
16:42:03.749 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:7， field: 17， 用户ID: 17
16:42:03.807 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:8， field: 18， 用户ID: 18
16:42:03.863 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:9， field: 19， 用户ID: 19
16:42:03.917 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:0， field: 20， 用户ID: 20
16:42:03.970 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:1， field: 21， 用户ID: 21
16:42:04.031 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:2， field: 22， 用户ID: 22
16:42:04.086 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:null:3， field: 23， 用户ID: 23
16:42:04.087 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
16:42:32.738 [SpringApplicationShutdownHook] INFO  o.s.boot.web.embedded.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
16:42:34.749 [tomcat-shutdown] INFO  o.s.boot.web.embedded.tomcat.GracefulShutdown - Graceful shutdown complete
16:42:34.900 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
16:42:34.908 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
16:42:36.048 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
16:42:36.062 [main] INFO  com.example.demo.DemoApplication - Starting DemoApplication using Java 17.0.11 with PID 74660 (/Users/bootscoder/Downloads/redispractice/demo/target/classes started by bootscoder in /Users/bootscoder/Downloads/redispractice/demo)
16:42:36.062 [main] DEBUG com.example.demo.DemoApplication - Running with Spring Boot v3.4.4, Spring v6.2.5
16:42:36.063 [main] INFO  com.example.demo.DemoApplication - No active profile set, falling back to 1 default profile: "default"
16:42:36.387 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
16:42:36.389 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
16:42:36.397 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 2 ms. Found 0 Redis repository interfaces.
16:42:36.640 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 9999 (http)
16:42:36.644 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-9999"]
16:42:36.645 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
16:42:36.645 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.39]
16:42:36.662 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/bootscoder] - Initializing Spring embedded WebApplicationContext
16:42:36.663 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 587 ms
16:42:36.892 [main] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
16:42:37.084 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 14 endpoints beneath base path '/actuator'
16:42:37.107 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-9999"]
16:42:37.113 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 9999 (http) with context path '/bootscoder'
16:42:37.123 [main] INFO  com.example.demo.DemoApplication - Started DemoApplication in 1.193 seconds (process running for 1.439)
16:42:37.399 [RMI TCP Connection(3)-192.168.1.3] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
16:42:37.399 [RMI TCP Connection(2)-192.168.1.3] INFO  o.a.c.c.C.[Tomcat].[localhost].[/bootscoder] - Initializing Spring DispatcherServlet 'dispatcherServlet'
16:42:37.399 [RMI TCP Connection(2)-192.168.1.3] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
16:42:37.400 [RMI TCP Connection(2)-192.168.1.3] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
16:42:38.149 [RMI TCP Connection(3)-192.168.1.3] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@727de55b
16:42:38.152 [RMI TCP Connection(3)-192.168.1.3] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
16:43:01.096 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
16:43:01.136 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
16:43:01.208 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
16:43:01.219 [scheduling-1] ERROR o.s.s.support.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
org.springframework.data.redis.serializer.SerializationException: Could not write JSON: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: java.util.ArrayList[0]->com.example.demo.entity.User["createdAt"])
	at org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer.serialize(Jackson2JsonRedisSerializer.java:157)
	at org.springframework.data.redis.core.AbstractOperations.rawValue(AbstractOperations.java:148)
	at org.springframework.data.redis.core.DefaultValueOperations.set(DefaultValueOperations.java:197)
	at com.example.demo.scheduleTask.RedisFlushTask.flushUsersToRedis(RedisFlushTask.java:41)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.runInternal(ScheduledMethodRunnable.java:130)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.lambda$run$2(ScheduledMethodRunnable.java:124)
	at io.micrometer.observation.Observation.observe(Observation.java:498)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.run(ScheduledMethodRunnable.java:124)
	at org.springframework.scheduling.config.Task$OutcomeTrackingRunnable.run(Task.java:85)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at org.springframework.scheduling.concurrent.ReschedulingRunnable.run(ReschedulingRunnable.java:96)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: java.util.ArrayList[0]->com.example.demo.entity.User["createdAt"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1340)
	at com.fasterxml.jackson.databind.ser.impl.UnsupportedTypeSerializer.serialize(UnsupportedTypeSerializer.java:35)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:770)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:653)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeTypedContents(IndexedListSerializer.java:181)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:92)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:18)
	at com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase.serializeWithType(AsArraySerializerBase.java:266)
	at com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer.serialize(TypeWrappedSerializer.java:32)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:502)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:341)
	at com.fasterxml.jackson.databind.ObjectMapper._writeValueAndClose(ObjectMapper.java:4819)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsBytes(ObjectMapper.java:4085)
	at org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer.serialize(Jackson2JsonRedisSerializer.java:155)
	... 20 common frames omitted
16:44:01.071 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
16:44:01.075 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
16:44:01.140 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
16:44:01.143 [scheduling-1] ERROR o.s.s.support.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
org.springframework.data.redis.serializer.SerializationException: Could not write JSON: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: java.util.ArrayList[0]->com.example.demo.entity.User["createdAt"])
	at org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer.serialize(Jackson2JsonRedisSerializer.java:157)
	at org.springframework.data.redis.core.AbstractOperations.rawValue(AbstractOperations.java:148)
	at org.springframework.data.redis.core.DefaultValueOperations.set(DefaultValueOperations.java:197)
	at com.example.demo.scheduleTask.RedisFlushTask.flushUsersToRedis(RedisFlushTask.java:41)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.runInternal(ScheduledMethodRunnable.java:130)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.lambda$run$2(ScheduledMethodRunnable.java:124)
	at io.micrometer.observation.Observation.observe(Observation.java:498)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.run(ScheduledMethodRunnable.java:124)
	at org.springframework.scheduling.config.Task$OutcomeTrackingRunnable.run(Task.java:85)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at org.springframework.scheduling.concurrent.ReschedulingRunnable.run(ReschedulingRunnable.java:96)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: java.util.ArrayList[0]->com.example.demo.entity.User["createdAt"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1340)
	at com.fasterxml.jackson.databind.ser.impl.UnsupportedTypeSerializer.serialize(UnsupportedTypeSerializer.java:35)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:770)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:653)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeTypedContents(IndexedListSerializer.java:181)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:92)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:18)
	at com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase.serializeWithType(AsArraySerializerBase.java:266)
	at com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer.serialize(TypeWrappedSerializer.java:32)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:502)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:341)
	at com.fasterxml.jackson.databind.ObjectMapper._writeValueAndClose(ObjectMapper.java:4819)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsBytes(ObjectMapper.java:4085)
	at org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer.serialize(Jackson2JsonRedisSerializer.java:155)
	... 20 common frames omitted
16:45:01.061 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
16:45:01.061 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
16:45:01.117 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
16:45:01.118 [scheduling-1] ERROR o.s.s.support.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
org.springframework.data.redis.serializer.SerializationException: Could not write JSON: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: java.util.ArrayList[0]->com.example.demo.entity.User["createdAt"])
	at org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer.serialize(Jackson2JsonRedisSerializer.java:157)
	at org.springframework.data.redis.core.AbstractOperations.rawValue(AbstractOperations.java:148)
	at org.springframework.data.redis.core.DefaultValueOperations.set(DefaultValueOperations.java:197)
	at com.example.demo.scheduleTask.RedisFlushTask.flushUsersToRedis(RedisFlushTask.java:41)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.runInternal(ScheduledMethodRunnable.java:130)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.lambda$run$2(ScheduledMethodRunnable.java:124)
	at io.micrometer.observation.Observation.observe(Observation.java:498)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.run(ScheduledMethodRunnable.java:124)
	at org.springframework.scheduling.config.Task$OutcomeTrackingRunnable.run(Task.java:85)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at org.springframework.scheduling.concurrent.ReschedulingRunnable.run(ReschedulingRunnable.java:96)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: java.util.ArrayList[0]->com.example.demo.entity.User["createdAt"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1340)
	at com.fasterxml.jackson.databind.ser.impl.UnsupportedTypeSerializer.serialize(UnsupportedTypeSerializer.java:35)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:770)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:653)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeTypedContents(IndexedListSerializer.java:181)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:92)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:18)
	at com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase.serializeWithType(AsArraySerializerBase.java:266)
	at com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer.serialize(TypeWrappedSerializer.java:32)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:502)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:341)
	at com.fasterxml.jackson.databind.ObjectMapper._writeValueAndClose(ObjectMapper.java:4819)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsBytes(ObjectMapper.java:4085)
	at org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer.serialize(Jackson2JsonRedisSerializer.java:155)
	... 20 common frames omitted
16:45:19.653 [SpringApplicationShutdownHook] INFO  o.s.boot.web.embedded.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
16:45:46.961 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
16:45:46.977 [main] INFO  com.example.demo.DemoApplication - Starting DemoApplication using Java 17.0.11 with PID 74752 (/Users/bootscoder/Downloads/redispractice/demo/target/classes started by bootscoder in /Users/bootscoder/Downloads/redispractice/demo)
16:45:46.977 [main] DEBUG com.example.demo.DemoApplication - Running with Spring Boot v3.4.4, Spring v6.2.5
16:45:46.977 [main] INFO  com.example.demo.DemoApplication - No active profile set, falling back to 1 default profile: "default"
16:45:47.319 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
16:45:47.320 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
16:45:47.332 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 2 ms. Found 0 Redis repository interfaces.
16:45:47.539 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 9999 (http)
16:45:47.543 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-9999"]
16:45:47.544 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
16:45:47.544 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.39]
16:45:47.566 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/bootscoder] - Initializing Spring embedded WebApplicationContext
16:45:47.567 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 576 ms
16:45:47.795 [main] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
16:45:47.994 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 14 endpoints beneath base path '/actuator'
16:45:48.017 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-9999"]
16:45:48.022 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 9999 (http) with context path '/bootscoder'
16:45:48.031 [main] INFO  com.example.demo.DemoApplication - Started DemoApplication in 1.19 seconds (process running for 1.413)
16:45:48.342 [RMI TCP Connection(2)-192.168.1.3] INFO  o.a.c.c.C.[Tomcat].[localhost].[/bootscoder] - Initializing Spring DispatcherServlet 'dispatcherServlet'
16:45:48.343 [RMI TCP Connection(2)-192.168.1.3] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
16:45:48.343 [RMI TCP Connection(1)-192.168.1.3] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
16:45:48.344 [RMI TCP Connection(2)-192.168.1.3] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
16:45:49.105 [RMI TCP Connection(1)-192.168.1.3] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@387cfce4
16:45:49.111 [RMI TCP Connection(1)-192.168.1.3] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
16:45:49.320 [boundedElastic-1] WARN  o.s.b.a.data.redis.RedisReactiveHealthIndicator - Redis health check failed
org.springframework.data.redis.RedisConnectionFailureException: Unable to connect to Redis
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$ExceptionTranslatingConnectionProvider.translateException(LettuceConnectionFactory.java:1858)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$ExceptionTranslatingConnectionProvider.getConnection(LettuceConnectionFactory.java:1789)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getNativeConnection(LettuceConnectionFactory.java:1586)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.lambda$getConnection$0(LettuceConnectionFactory.java:1566)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.doInLock(LettuceConnectionFactory.java:1527)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getConnection(LettuceConnectionFactory.java:1563)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getSharedReactiveConnection(LettuceConnectionFactory.java:1274)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getReactiveConnection(LettuceConnectionFactory.java:1149)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getReactiveConnection(LettuceConnectionFactory.java:120)
	at reactor.core.publisher.MonoSupplier.call(MonoSupplier.java:67)
	at reactor.core.publisher.FluxSubscribeOnCallable$CallableSubscribeOnSubscription.run(FluxSubscribeOnCallable.java:228)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.lettuce.core.RedisConnectionException: Unable to connect to localhost/<unresolved>:6379
	at io.lettuce.core.RedisConnectionException.create(RedisConnectionException.java:63)
	at io.lettuce.core.RedisConnectionException.create(RedisConnectionException.java:41)
	at io.lettuce.core.AbstractRedisClient.getConnection(AbstractRedisClient.java:354)
	at io.lettuce.core.RedisClient.connect(RedisClient.java:219)
	at org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider.lambda$getConnection$1(StandaloneConnectionProvider.java:112)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider.getConnection(StandaloneConnectionProvider.java:112)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$ExceptionTranslatingConnectionProvider.getConnection(LettuceConnectionFactory.java:1787)
	... 16 common frames omitted
Caused by: io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:6379
Caused by: java.net.ConnectException: Connection refused
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:672)
	at java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:946)
	at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:336)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:339)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:784)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
16:46:00.654 [SpringApplicationShutdownHook] INFO  o.s.boot.web.embedded.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
16:46:03.088 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
16:46:03.103 [main] INFO  com.example.demo.DemoApplication - Starting DemoApplication using Java 17.0.11 with PID 74765 (/Users/bootscoder/Downloads/redispractice/demo/target/classes started by bootscoder in /Users/bootscoder/Downloads/redispractice/demo)
16:46:03.103 [main] DEBUG com.example.demo.DemoApplication - Running with Spring Boot v3.4.4, Spring v6.2.5
16:46:03.103 [main] INFO  com.example.demo.DemoApplication - No active profile set, falling back to 1 default profile: "default"
16:46:03.442 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
16:46:03.443 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
16:46:03.451 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 2 ms. Found 0 Redis repository interfaces.
16:46:03.642 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 9999 (http)
16:46:03.646 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-9999"]
16:46:03.646 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
16:46:03.646 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.39]
16:46:03.667 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/bootscoder] - Initializing Spring embedded WebApplicationContext
16:46:03.668 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 551 ms
16:46:03.891 [main] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
16:46:04.078 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 14 endpoints beneath base path '/actuator'
16:46:04.100 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-9999"]
16:46:04.107 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 9999 (http) with context path '/bootscoder'
16:46:04.116 [main] INFO  com.example.demo.DemoApplication - Started DemoApplication in 1.144 seconds (process running for 1.353)
16:46:04.504 [RMI TCP Connection(2)-192.168.1.3] INFO  o.a.c.c.C.[Tomcat].[localhost].[/bootscoder] - Initializing Spring DispatcherServlet 'dispatcherServlet'
16:46:04.504 [RMI TCP Connection(2)-192.168.1.3] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
16:46:04.505 [RMI TCP Connection(3)-192.168.1.3] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
16:46:04.505 [RMI TCP Connection(2)-192.168.1.3] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
16:46:05.113 [RMI TCP Connection(3)-192.168.1.3] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@2ade1b20
16:46:05.118 [RMI TCP Connection(3)-192.168.1.3] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
16:46:05.318 [boundedElastic-1] WARN  o.s.b.a.data.redis.RedisReactiveHealthIndicator - Redis health check failed
org.springframework.data.redis.RedisConnectionFailureException: Unable to connect to Redis
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$ExceptionTranslatingConnectionProvider.translateException(LettuceConnectionFactory.java:1858)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$ExceptionTranslatingConnectionProvider.getConnection(LettuceConnectionFactory.java:1789)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getNativeConnection(LettuceConnectionFactory.java:1586)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.lambda$getConnection$0(LettuceConnectionFactory.java:1566)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.doInLock(LettuceConnectionFactory.java:1527)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getConnection(LettuceConnectionFactory.java:1563)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getSharedReactiveConnection(LettuceConnectionFactory.java:1274)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getReactiveConnection(LettuceConnectionFactory.java:1149)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getReactiveConnection(LettuceConnectionFactory.java:120)
	at reactor.core.publisher.MonoSupplier.call(MonoSupplier.java:67)
	at reactor.core.publisher.FluxSubscribeOnCallable$CallableSubscribeOnSubscription.run(FluxSubscribeOnCallable.java:228)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: io.lettuce.core.RedisConnectionException: Unable to connect to localhost/<unresolved>:6379
	at io.lettuce.core.RedisConnectionException.create(RedisConnectionException.java:63)
	at io.lettuce.core.RedisConnectionException.create(RedisConnectionException.java:41)
	at io.lettuce.core.AbstractRedisClient.getConnection(AbstractRedisClient.java:354)
	at io.lettuce.core.RedisClient.connect(RedisClient.java:219)
	at org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider.lambda$getConnection$1(StandaloneConnectionProvider.java:112)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider.getConnection(StandaloneConnectionProvider.java:112)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$ExceptionTranslatingConnectionProvider.getConnection(LettuceConnectionFactory.java:1787)
	... 16 common frames omitted
Caused by: io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:6379
Caused by: java.net.ConnectException: Connection refused
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:672)
	at java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:946)
	at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:336)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:339)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:784)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:842)
16:46:53.453 [SpringApplicationShutdownHook] INFO  o.s.boot.web.embedded.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
16:46:55.465 [tomcat-shutdown] INFO  o.s.boot.web.embedded.tomcat.GracefulShutdown - Graceful shutdown complete
16:46:55.489 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
16:46:55.497 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
16:48:15.166 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
16:48:15.191 [main] INFO  com.example.demo.DemoApplication - Starting DemoApplication using Java 17.0.11 with PID 74846 (/Users/bootscoder/Downloads/redispractice/demo/target/classes started by bootscoder in /Users/bootscoder/Downloads/redispractice/demo)
16:48:15.192 [main] DEBUG com.example.demo.DemoApplication - Running with Spring Boot v3.4.4, Spring v6.2.5
16:48:15.192 [main] INFO  com.example.demo.DemoApplication - No active profile set, falling back to 1 default profile: "default"
16:48:15.534 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
16:48:15.536 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
16:48:15.545 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
16:48:15.765 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 9999 (http)
16:48:15.770 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-9999"]
16:48:15.770 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
16:48:15.770 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.39]
16:48:15.787 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/bootscoder] - Initializing Spring embedded WebApplicationContext
16:48:15.787 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 579 ms
16:48:16.038 [main] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
16:48:16.256 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 14 endpoints beneath base path '/actuator'
16:48:16.277 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-9999"]
16:48:16.282 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 9999 (http) with context path '/bootscoder'
16:48:16.291 [main] INFO  com.example.demo.DemoApplication - Started DemoApplication in 1.252 seconds (process running for 1.49)
16:48:16.518 [RMI TCP Connection(3)-192.168.1.3] INFO  o.a.c.c.C.[Tomcat].[localhost].[/bootscoder] - Initializing Spring DispatcherServlet 'dispatcherServlet'
16:48:16.518 [RMI TCP Connection(3)-192.168.1.3] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
16:48:16.518 [RMI TCP Connection(2)-192.168.1.3] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
16:48:16.521 [RMI TCP Connection(3)-192.168.1.3] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 3 ms
16:48:17.184 [RMI TCP Connection(2)-192.168.1.3] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@66d11a7d
16:48:17.187 [RMI TCP Connection(2)-192.168.1.3] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
16:48:53.979 [SpringApplicationShutdownHook] INFO  o.s.boot.web.embedded.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
16:48:58.703 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
16:48:58.718 [main] INFO  com.example.demo.DemoApplication - Starting DemoApplication using Java 17.0.11 with PID 74880 (/Users/bootscoder/Downloads/redispractice/demo/target/classes started by bootscoder in /Users/bootscoder/Downloads/redispractice/demo)
16:48:58.718 [main] DEBUG com.example.demo.DemoApplication - Running with Spring Boot v3.4.4, Spring v6.2.5
16:48:58.719 [main] INFO  com.example.demo.DemoApplication - No active profile set, falling back to 1 default profile: "default"
16:48:59.040 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
16:48:59.041 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
16:48:59.056 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
16:48:59.411 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 9999 (http)
16:48:59.415 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-9999"]
16:48:59.416 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
16:48:59.416 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.39]
16:48:59.432 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/bootscoder] - Initializing Spring embedded WebApplicationContext
16:48:59.432 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 701 ms
16:48:59.653 [main] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
16:48:59.866 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 14 endpoints beneath base path '/actuator'
16:48:59.888 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-9999"]
16:48:59.894 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 9999 (http) with context path '/bootscoder'
16:48:59.903 [main] INFO  com.example.demo.DemoApplication - Started DemoApplication in 1.317 seconds (process running for 1.527)
16:49:00.145 [RMI TCP Connection(2)-192.168.1.3] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
16:49:00.146 [RMI TCP Connection(3)-192.168.1.3] INFO  o.a.c.c.C.[Tomcat].[localhost].[/bootscoder] - Initializing Spring DispatcherServlet 'dispatcherServlet'
16:49:00.146 [RMI TCP Connection(3)-192.168.1.3] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
16:49:00.147 [RMI TCP Connection(3)-192.168.1.3] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
16:49:01.036 [RMI TCP Connection(2)-192.168.1.3] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@651e4196
16:49:01.039 [RMI TCP Connection(2)-192.168.1.3] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
16:49:01.050 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
16:49:01.062 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
16:49:01.141 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
16:49:01.545 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储所有用户数据到 Redis key: users
16:49:01.771 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:1，用户ID: 1
16:49:01.830 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:2，用户ID: 2
16:49:01.896 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:3，用户ID: 3
16:49:01.958 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:4，用户ID: 4
16:49:02.024 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:5，用户ID: 5
16:49:02.087 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:6，用户ID: 6
16:49:02.150 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:7，用户ID: 7
16:49:02.219 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:8，用户ID: 8
16:49:02.283 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:9，用户ID: 9
16:49:02.350 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:10，用户ID: 10
16:49:02.420 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:11，用户ID: 11
16:49:02.482 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:12，用户ID: 12
16:49:02.545 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:13，用户ID: 13
16:49:02.606 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:14，用户ID: 14
16:49:02.668 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:15，用户ID: 15
16:49:02.730 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:16，用户ID: 16
16:49:02.813 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:17，用户ID: 17
16:49:02.876 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:18，用户ID: 18
16:49:02.947 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:19，用户ID: 19
16:49:03.015 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:20，用户ID: 20
16:49:03.079 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:21，用户ID: 21
16:49:03.143 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:22，用户ID: 22
16:49:03.207 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:23，用户ID: 23
16:49:03.271 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 1， 用户ID: 1
16:49:03.341 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 2， 用户ID: 2
16:49:03.406 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 3， 用户ID: 3
16:49:03.468 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 4， 用户ID: 4
16:49:03.531 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:2， field: 5， 用户ID: 5
16:49:03.597 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:0， field: 6， 用户ID: 6
16:49:03.663 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 7， 用户ID: 7
16:49:03.725 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:2， field: 8， 用户ID: 8
16:49:03.794 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:0， field: 9， 用户ID: 9
16:49:03.864 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 10， 用户ID: 10
16:49:03.928 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 11， 用户ID: 11
16:49:03.989 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:0， field: 12， 用户ID: 12
16:49:04.050 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:1， field: 13， 用户ID: 13
16:49:04.113 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 14， 用户ID: 14
16:49:04.175 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:0， field: 15， 用户ID: 15
16:49:04.238 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:1， field: 16， 用户ID: 16
16:49:04.300 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 17， 用户ID: 17
16:49:04.370 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 18， 用户ID: 18
16:49:04.455 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:1， field: 19， 用户ID: 19
16:49:04.518 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 20， 用户ID: 20
16:49:04.585 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 21， 用户ID: 21
16:49:04.659 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:1， field: 22， 用户ID: 22
16:49:04.722 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 23， 用户ID: 23
16:49:04.722 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
16:50:01.073 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
16:50:01.076 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
16:50:01.146 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
16:50:01.212 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储所有用户数据到 Redis key: users
16:50:01.273 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:1，用户ID: 1
16:50:01.342 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:2，用户ID: 2
16:50:01.407 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:3，用户ID: 3
16:50:01.469 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:4，用户ID: 4
16:50:01.532 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:5，用户ID: 5
16:50:01.595 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:6，用户ID: 6
16:50:01.660 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:7，用户ID: 7
16:50:01.722 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:8，用户ID: 8
16:50:01.786 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:9，用户ID: 9
16:50:01.855 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:10，用户ID: 10
16:50:01.917 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:11，用户ID: 11
16:50:01.981 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:12，用户ID: 12
16:50:02.043 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:13，用户ID: 13
16:50:02.106 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:14，用户ID: 14
16:50:02.166 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:15，用户ID: 15
16:50:02.234 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:16，用户ID: 16
16:50:02.297 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:17，用户ID: 17
16:50:02.360 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:18，用户ID: 18
16:50:02.427 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:19，用户ID: 19
16:50:02.492 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:20，用户ID: 20
16:50:02.557 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:21，用户ID: 21
16:50:02.620 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:22，用户ID: 22
16:50:02.684 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:23，用户ID: 23
16:50:02.749 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 1， 用户ID: 1
16:50:02.817 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 2， 用户ID: 2
16:50:02.880 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 3， 用户ID: 3
16:50:02.942 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 4， 用户ID: 4
16:50:03.004 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:2， field: 5， 用户ID: 5
16:50:03.066 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:0， field: 6， 用户ID: 6
16:50:03.128 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 7， 用户ID: 7
16:50:03.190 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:2， field: 8， 用户ID: 8
16:50:03.255 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:0， field: 9， 用户ID: 9
16:50:03.333 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 10， 用户ID: 10
16:50:03.396 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 11， 用户ID: 11
16:50:03.477 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:0， field: 12， 用户ID: 12
16:50:03.538 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:1， field: 13， 用户ID: 13
16:50:03.600 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 14， 用户ID: 14
16:50:03.662 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:0， field: 15， 用户ID: 15
16:50:03.724 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:1， field: 16， 用户ID: 16
16:50:03.786 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 17， 用户ID: 17
16:50:03.849 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 18， 用户ID: 18
16:50:03.913 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:1， field: 19， 用户ID: 19
16:50:03.977 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 20， 用户ID: 20
16:50:04.038 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 21， 用户ID: 21
16:50:04.101 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:1， field: 22， 用户ID: 22
16:50:04.168 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 23， 用户ID: 23
16:50:04.169 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
16:51:01.065 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
16:51:01.068 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
16:51:01.131 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
16:51:01.233 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储所有用户数据到 Redis key: users
16:51:01.296 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:1，用户ID: 1
16:51:01.362 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:2，用户ID: 2
16:51:01.423 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:3，用户ID: 3
16:51:01.502 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:4，用户ID: 4
16:51:01.579 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:5，用户ID: 5
16:51:01.643 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:6，用户ID: 6
16:51:01.720 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:7，用户ID: 7
16:51:01.783 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:8，用户ID: 8
16:51:01.850 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:9，用户ID: 9
16:51:01.919 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:10，用户ID: 10
16:51:01.982 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:11，用户ID: 11
16:51:02.049 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:12，用户ID: 12
16:51:02.112 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:13，用户ID: 13
16:51:02.175 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:14，用户ID: 14
16:51:02.242 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:15，用户ID: 15
16:51:02.308 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:16，用户ID: 16
16:51:02.373 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:17，用户ID: 17
16:51:02.437 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:18，用户ID: 18
16:51:02.500 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:19，用户ID: 19
16:51:02.563 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:20，用户ID: 20
16:51:02.627 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:21，用户ID: 21
16:51:02.697 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:22，用户ID: 22
16:51:02.761 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:23，用户ID: 23
16:51:02.827 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 1， 用户ID: 1
16:51:02.892 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 2， 用户ID: 2
16:51:02.960 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 3， 用户ID: 3
16:51:03.030 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 4， 用户ID: 4
16:51:03.096 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:2， field: 5， 用户ID: 5
16:51:03.164 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:0， field: 6， 用户ID: 6
16:51:03.233 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 7， 用户ID: 7
16:51:03.298 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:2， field: 8， 用户ID: 8
16:51:03.365 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:0， field: 9， 用户ID: 9
16:51:03.429 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 10， 用户ID: 10
16:51:03.492 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 11， 用户ID: 11
16:51:03.560 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:0， field: 12， 用户ID: 12
16:51:03.628 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:1， field: 13， 用户ID: 13
16:51:03.689 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 14， 用户ID: 14
16:51:03.752 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:0， field: 15， 用户ID: 15
16:51:03.812 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:1， field: 16， 用户ID: 16
16:51:03.877 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 17， 用户ID: 17
16:51:03.939 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 18， 用户ID: 18
16:51:04.004 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:1， field: 19， 用户ID: 19
16:51:04.072 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 20， 用户ID: 20
16:51:04.138 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 21， 用户ID: 21
16:51:04.208 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:1， field: 22， 用户ID: 22
16:51:04.273 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 23， 用户ID: 23
16:51:04.274 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
16:52:01.059 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
16:52:01.061 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
16:52:01.117 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
16:52:01.182 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储所有用户数据到 Redis key: users
16:52:01.244 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:1，用户ID: 1
16:52:01.324 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:2，用户ID: 2
16:52:01.384 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:3，用户ID: 3
16:52:01.444 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:4，用户ID: 4
16:52:01.506 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:5，用户ID: 5
16:52:01.567 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:6，用户ID: 6
16:52:01.647 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:7，用户ID: 7
16:52:01.709 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:8，用户ID: 8
16:52:01.769 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:9，用户ID: 9
16:52:02.071 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:10，用户ID: 10
16:52:02.131 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:11，用户ID: 11
16:52:02.190 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:12，用户ID: 12
16:52:02.252 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:13，用户ID: 13
16:52:02.314 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:14，用户ID: 14
16:52:02.374 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:15，用户ID: 15
16:52:02.439 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:16，用户ID: 16
16:52:02.498 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:17，用户ID: 17
16:52:02.558 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:18，用户ID: 18
16:52:02.620 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:19，用户ID: 19
16:52:02.687 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:20，用户ID: 20
16:52:02.748 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:21，用户ID: 21
16:52:02.812 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:22，用户ID: 22
16:52:02.873 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:23，用户ID: 23
16:52:02.934 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 1， 用户ID: 1
16:52:02.994 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 2， 用户ID: 2
16:52:03.060 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 3， 用户ID: 3
16:52:03.123 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 4， 用户ID: 4
16:52:03.184 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:2， field: 5， 用户ID: 5
16:52:03.251 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:0， field: 6， 用户ID: 6
16:52:03.313 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 7， 用户ID: 7
16:52:03.374 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:2， field: 8， 用户ID: 8
16:52:03.435 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:0， field: 9， 用户ID: 9
16:52:03.498 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 10， 用户ID: 10
16:52:03.565 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 11， 用户ID: 11
16:52:03.624 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:0， field: 12， 用户ID: 12
16:52:03.701 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:1， field: 13， 用户ID: 13
16:52:03.770 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 14， 用户ID: 14
16:52:03.831 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:0， field: 15， 用户ID: 15
16:52:03.892 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:1， field: 16， 用户ID: 16
16:52:03.954 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 17， 用户ID: 17
16:52:04.022 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 18， 用户ID: 18
16:52:04.086 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:1， field: 19， 用户ID: 19
16:52:04.148 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 20， 用户ID: 20
16:52:04.210 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 21， 用户ID: 21
16:52:04.274 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:1， field: 22， 用户ID: 22
16:52:04.335 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 23， 用户ID: 23
16:52:04.335 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
16:53:01.057 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
16:53:01.059 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
16:53:01.121 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
16:53:01.186 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储所有用户数据到 Redis key: users
16:53:01.247 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:1，用户ID: 1
16:53:01.306 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:2，用户ID: 2
16:53:01.368 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:3，用户ID: 3
16:53:01.431 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:4，用户ID: 4
16:53:01.491 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:5，用户ID: 5
16:53:01.551 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:6，用户ID: 6
16:53:01.613 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:7，用户ID: 7
16:53:01.676 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:8，用户ID: 8
16:53:01.742 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:9，用户ID: 9
16:53:01.808 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:10，用户ID: 10
16:53:01.880 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:11，用户ID: 11
16:53:01.941 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:12，用户ID: 12
16:53:02.002 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:13，用户ID: 13
16:53:02.062 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:14，用户ID: 14
16:53:02.123 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:15，用户ID: 15
16:53:02.193 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:16，用户ID: 16
16:53:02.252 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:17，用户ID: 17
16:53:02.327 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:18，用户ID: 18
16:53:02.387 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:19，用户ID: 19
16:53:02.449 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:20，用户ID: 20
16:53:02.509 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:21，用户ID: 21
16:53:02.569 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:22，用户ID: 22
16:53:02.630 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:23，用户ID: 23
16:53:02.692 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 1， 用户ID: 1
16:53:03.029 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 2， 用户ID: 2
16:53:03.093 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 3， 用户ID: 3
16:53:03.160 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 4， 用户ID: 4
16:53:03.219 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:2， field: 5， 用户ID: 5
16:53:03.283 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:0， field: 6， 用户ID: 6
16:53:03.344 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 7， 用户ID: 7
16:53:03.409 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:2， field: 8， 用户ID: 8
16:53:03.482 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:0， field: 9， 用户ID: 9
16:53:03.548 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 10， 用户ID: 10
16:53:03.615 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 11， 用户ID: 11
16:53:03.709 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:0， field: 12， 用户ID: 12
16:53:03.788 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:1， field: 13， 用户ID: 13
16:53:03.855 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 14， 用户ID: 14
16:53:03.923 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:0， field: 15， 用户ID: 15
16:53:03.993 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:1， field: 16， 用户ID: 16
16:53:04.060 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 17， 用户ID: 17
16:53:04.121 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 18， 用户ID: 18
16:53:04.182 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:1， field: 19， 用户ID: 19
16:53:04.242 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 20， 用户ID: 20
16:53:04.303 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 21， 用户ID: 21
16:53:04.364 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:1， field: 22， 用户ID: 22
16:53:04.424 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 23， 用户ID: 23
16:53:04.424 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
16:54:01.066 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
16:54:01.069 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
16:54:01.135 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
16:54:01.206 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储所有用户数据到 Redis key: users
16:54:01.267 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:1，用户ID: 1
16:54:01.327 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:2，用户ID: 2
16:54:01.391 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:3，用户ID: 3
16:54:01.452 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:4，用户ID: 4
16:54:01.515 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:5，用户ID: 5
16:54:01.578 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:6，用户ID: 6
16:54:01.641 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:7，用户ID: 7
16:54:01.702 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:8，用户ID: 8
16:54:01.767 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:9，用户ID: 9
16:54:01.834 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:10，用户ID: 10
16:54:01.898 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:11，用户ID: 11
16:54:01.961 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:12，用户ID: 12
16:54:02.024 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:13，用户ID: 13
16:54:02.085 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:14，用户ID: 14
16:54:02.149 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:15，用户ID: 15
16:54:02.209 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:16，用户ID: 16
16:54:02.272 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:17，用户ID: 17
16:54:02.348 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:18，用户ID: 18
16:54:02.412 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:19，用户ID: 19
16:54:02.476 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:20，用户ID: 20
16:54:02.537 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:21，用户ID: 21
16:54:02.602 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:22，用户ID: 22
16:54:02.670 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:23，用户ID: 23
16:54:02.740 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 1， 用户ID: 1
16:54:02.801 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 2， 用户ID: 2
16:54:02.866 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 3， 用户ID: 3
16:54:02.939 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 4， 用户ID: 4
16:54:03.007 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:2， field: 5， 用户ID: 5
16:54:03.072 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:0， field: 6， 用户ID: 6
16:54:03.133 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 7， 用户ID: 7
16:54:03.194 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:2， field: 8， 用户ID: 8
16:54:03.262 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:0， field: 9， 用户ID: 9
16:54:03.322 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 10， 用户ID: 10
16:54:03.383 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 11， 用户ID: 11
16:54:03.443 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:0， field: 12， 用户ID: 12
16:54:03.505 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:1， field: 13， 用户ID: 13
16:54:03.600 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 14， 用户ID: 14
16:54:03.660 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:0， field: 15， 用户ID: 15
16:54:03.724 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:1， field: 16， 用户ID: 16
16:54:03.790 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 17， 用户ID: 17
16:54:03.856 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 18， 用户ID: 18
16:54:03.916 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:1， field: 19， 用户ID: 19
16:54:03.978 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 20， 用户ID: 20
16:54:04.041 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 21， 用户ID: 21
16:54:04.104 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:1， field: 22， 用户ID: 22
16:54:04.164 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 23， 用户ID: 23
16:54:04.164 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
16:55:01.067 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
16:55:01.069 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
16:55:01.167 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
16:55:01.241 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储所有用户数据到 Redis key: users
16:55:01.307 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:1，用户ID: 1
16:55:01.381 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:2，用户ID: 2
16:55:01.477 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:3，用户ID: 3
16:55:01.858 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:4，用户ID: 4
16:55:02.236 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:5，用户ID: 5
16:55:02.297 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:6，用户ID: 6
16:55:02.373 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:7，用户ID: 7
16:55:02.437 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:8，用户ID: 8
16:55:02.501 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:9，用户ID: 9
16:55:02.567 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:10，用户ID: 10
16:55:02.665 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:11，用户ID: 11
16:55:02.726 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:12，用户ID: 12
16:55:02.788 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:13，用户ID: 13
16:55:02.848 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:14，用户ID: 14
16:55:02.911 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:15，用户ID: 15
16:55:02.993 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:16，用户ID: 16
16:55:03.064 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:17，用户ID: 17
16:55:03.125 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:18，用户ID: 18
16:55:03.191 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:19，用户ID: 19
16:55:03.254 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:20，用户ID: 20
16:55:03.611 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:21，用户ID: 21
16:55:03.678 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:22，用户ID: 22
16:55:03.739 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:23，用户ID: 23
16:55:03.802 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 1， 用户ID: 1
16:55:03.866 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 2， 用户ID: 2
16:55:03.934 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 3， 用户ID: 3
16:55:03.996 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 4， 用户ID: 4
16:55:04.057 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:2， field: 5， 用户ID: 5
16:55:04.150 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:0， field: 6， 用户ID: 6
16:55:04.216 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 7， 用户ID: 7
16:55:04.277 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:2， field: 8， 用户ID: 8
16:55:04.339 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:0， field: 9， 用户ID: 9
16:55:04.400 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 10， 用户ID: 10
16:55:04.464 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 11， 用户ID: 11
16:55:04.527 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:0， field: 12， 用户ID: 12
16:55:04.587 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:1， field: 13， 用户ID: 13
16:55:04.659 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 14， 用户ID: 14
16:55:04.729 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:0， field: 15， 用户ID: 15
16:55:04.793 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:1， field: 16， 用户ID: 16
16:55:04.856 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 17， 用户ID: 17
16:55:04.920 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 18， 用户ID: 18
16:55:04.981 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:1， field: 19， 用户ID: 19
16:55:05.046 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 20， 用户ID: 20
16:55:05.110 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 21， 用户ID: 21
16:55:05.171 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:1， field: 22， 用户ID: 22
16:55:05.230 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 23， 用户ID: 23
16:55:05.231 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
16:56:01.290 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
16:56:01.293 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
16:56:01.357 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
16:56:01.489 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储所有用户数据到 Redis key: users
16:56:01.554 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:1，用户ID: 1
16:56:01.620 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:2，用户ID: 2
16:56:01.691 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:3，用户ID: 3
16:56:01.770 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:4，用户ID: 4
16:56:02.133 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:5，用户ID: 5
16:56:02.196 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:6，用户ID: 6
16:56:02.275 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:7，用户ID: 7
16:56:02.337 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:8，用户ID: 8
16:56:02.403 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:9，用户ID: 9
16:56:02.464 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:10，用户ID: 10
16:56:02.532 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:11，用户ID: 11
16:56:02.594 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:12，用户ID: 12
16:56:02.671 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:13，用户ID: 13
16:56:02.731 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:14，用户ID: 14
16:56:02.801 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:15，用户ID: 15
16:56:02.863 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:16，用户ID: 16
16:56:02.926 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:17，用户ID: 17
16:56:02.992 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:18，用户ID: 18
16:56:03.064 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:19，用户ID: 19
16:56:03.126 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:20，用户ID: 20
16:56:03.200 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:21，用户ID: 21
16:56:03.269 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:22，用户ID: 22
16:56:03.333 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:23，用户ID: 23
16:56:03.395 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 1， 用户ID: 1
16:56:03.469 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 2， 用户ID: 2
16:56:03.569 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 3， 用户ID: 3
16:56:03.635 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 4， 用户ID: 4
16:56:03.705 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:2， field: 5， 用户ID: 5
16:56:03.770 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:0， field: 6， 用户ID: 6
16:56:03.840 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 7， 用户ID: 7
16:56:04.197 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:2， field: 8， 用户ID: 8
16:56:04.261 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:0， field: 9， 用户ID: 9
16:56:04.323 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 10， 用户ID: 10
16:56:04.383 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 11， 用户ID: 11
16:56:04.447 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:0， field: 12， 用户ID: 12
16:56:04.508 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:1， field: 13， 用户ID: 13
16:56:04.571 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 14， 用户ID: 14
16:56:04.634 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:0， field: 15， 用户ID: 15
16:56:04.698 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:1， field: 16， 用户ID: 16
16:56:04.762 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 17， 用户ID: 17
16:56:04.829 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 18， 用户ID: 18
16:56:04.896 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:1， field: 19， 用户ID: 19
16:56:04.958 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 20， 用户ID: 20
16:56:05.570 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 21， 用户ID: 21
16:56:05.646 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:1， field: 22， 用户ID: 22
16:56:05.710 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 23， 用户ID: 23
16:56:05.710 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
16:57:01.072 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
16:57:01.074 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
16:57:01.151 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
16:57:01.763 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储所有用户数据到 Redis key: users
16:57:01.828 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:1，用户ID: 1
16:57:01.888 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:2，用户ID: 2
16:57:01.950 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:3，用户ID: 3
16:57:02.014 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:4，用户ID: 4
16:57:02.079 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:5，用户ID: 5
16:57:02.144 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:6，用户ID: 6
16:57:02.206 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:7，用户ID: 7
16:57:02.273 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:8，用户ID: 8
16:57:02.353 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:9，用户ID: 9
16:57:02.425 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:10，用户ID: 10
16:57:02.488 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:11，用户ID: 11
16:57:02.555 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:12，用户ID: 12
16:57:02.621 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:13，用户ID: 13
16:57:02.683 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:14，用户ID: 14
16:57:02.746 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:15，用户ID: 15
16:57:02.808 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:16，用户ID: 16
16:57:02.872 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:17，用户ID: 17
16:57:02.937 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:18，用户ID: 18
16:57:02.997 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:19，用户ID: 19
16:57:03.067 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:20，用户ID: 20
16:57:03.127 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:21，用户ID: 21
16:57:03.195 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:22，用户ID: 22
16:57:03.257 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:23，用户ID: 23
16:57:03.322 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 1， 用户ID: 1
16:57:03.382 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 2， 用户ID: 2
16:57:03.445 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 3， 用户ID: 3
16:57:03.509 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 4， 用户ID: 4
16:57:03.573 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:2， field: 5， 用户ID: 5
16:57:03.635 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:0， field: 6， 用户ID: 6
16:57:03.715 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 7， 用户ID: 7
16:57:03.777 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:2， field: 8， 用户ID: 8
16:57:03.845 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:0， field: 9， 用户ID: 9
16:57:03.909 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 10， 用户ID: 10
16:57:03.971 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 11， 用户ID: 11
16:57:04.034 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:0， field: 12， 用户ID: 12
16:57:04.096 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:1， field: 13， 用户ID: 13
16:57:04.158 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 14， 用户ID: 14
16:57:04.218 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:0， field: 15， 用户ID: 15
16:57:04.282 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:1， field: 16， 用户ID: 16
16:57:04.343 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 17， 用户ID: 17
16:57:04.408 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 18， 用户ID: 18
16:57:04.469 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:1， field: 19， 用户ID: 19
16:57:04.533 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 20， 用户ID: 20
16:57:04.596 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 21， 用户ID: 21
16:57:04.656 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:1， field: 22， 用户ID: 22
16:57:04.735 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 23， 用户ID: 23
16:57:04.735 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
16:58:01.062 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
16:58:01.063 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
16:58:01.118 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
16:58:01.179 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储所有用户数据到 Redis key: users
16:58:01.239 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:1，用户ID: 1
16:58:01.312 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:2，用户ID: 2
16:58:01.374 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:3，用户ID: 3
16:58:01.439 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:4，用户ID: 4
16:58:01.501 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:5，用户ID: 5
16:58:01.561 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:6，用户ID: 6
16:58:01.620 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:7，用户ID: 7
16:58:01.686 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:8，用户ID: 8
16:58:01.745 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:9，用户ID: 9
16:58:01.825 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:10，用户ID: 10
16:58:01.901 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:11，用户ID: 11
16:58:01.971 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:12，用户ID: 12
16:58:02.047 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:13，用户ID: 13
16:58:02.172 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:14，用户ID: 14
16:58:02.237 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:15，用户ID: 15
16:58:02.382 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:16，用户ID: 16
16:58:02.442 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:17，用户ID: 17
16:58:02.507 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:18，用户ID: 18
16:58:02.567 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:19，用户ID: 19
16:58:02.630 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:20，用户ID: 20
16:58:02.699 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:21，用户ID: 21
16:58:02.763 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:22，用户ID: 22
16:58:02.823 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:23，用户ID: 23
16:58:02.906 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 1， 用户ID: 1
16:58:02.966 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 2， 用户ID: 2
16:58:03.027 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 3， 用户ID: 3
16:58:03.094 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 4， 用户ID: 4
16:58:03.155 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:2， field: 5， 用户ID: 5
16:58:03.529 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:0， field: 6， 用户ID: 6
16:58:03.591 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 7， 用户ID: 7
16:58:03.651 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:2， field: 8， 用户ID: 8
16:58:03.726 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:0， field: 9， 用户ID: 9
16:58:03.816 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 10， 用户ID: 10
16:58:03.886 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 11， 用户ID: 11
16:58:03.948 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:0， field: 12， 用户ID: 12
16:58:04.011 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:1， field: 13， 用户ID: 13
16:58:04.076 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 14， 用户ID: 14
16:58:04.144 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:0， field: 15， 用户ID: 15
16:58:04.205 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:1， field: 16， 用户ID: 16
16:58:04.265 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 17， 用户ID: 17
16:58:04.325 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 18， 用户ID: 18
16:58:04.386 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:1， field: 19， 用户ID: 19
16:58:04.446 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 20， 用户ID: 20
16:58:04.513 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 21， 用户ID: 21
16:58:04.575 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:1， field: 22， 用户ID: 22
16:58:04.642 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 23， 用户ID: 23
16:58:04.642 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
16:59:01.064 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
16:59:01.067 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
16:59:01.130 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
16:59:02.049 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储所有用户数据到 Redis key: users
16:59:02.110 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:1，用户ID: 1
16:59:02.170 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:2，用户ID: 2
16:59:02.236 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:3，用户ID: 3
16:59:02.305 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:4，用户ID: 4
16:59:02.369 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:5，用户ID: 5
16:59:02.439 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:6，用户ID: 6
16:59:02.500 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:7，用户ID: 7
16:59:02.561 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:8，用户ID: 8
16:59:02.628 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:9，用户ID: 9
16:59:02.690 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:10，用户ID: 10
16:59:02.775 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:11，用户ID: 11
16:59:02.837 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:12，用户ID: 12
16:59:02.898 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:13，用户ID: 13
16:59:02.957 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:14，用户ID: 14
16:59:03.018 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:15，用户ID: 15
16:59:03.084 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:16，用户ID: 16
16:59:03.145 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:17，用户ID: 17
16:59:03.205 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:18，用户ID: 18
16:59:03.266 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:19，用户ID: 19
16:59:03.335 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:20，用户ID: 20
16:59:03.394 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:21，用户ID: 21
16:59:03.454 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:22，用户ID: 22
16:59:03.519 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:23，用户ID: 23
16:59:03.581 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 1， 用户ID: 1
16:59:03.646 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 2， 用户ID: 2
16:59:03.708 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 3， 用户ID: 3
16:59:03.769 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 4， 用户ID: 4
16:59:03.829 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:2， field: 5， 用户ID: 5
16:59:03.895 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:0， field: 6， 用户ID: 6
16:59:03.993 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 7， 用户ID: 7
16:59:04.055 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:2， field: 8， 用户ID: 8
16:59:04.702 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:0， field: 9， 用户ID: 9
16:59:04.765 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 10， 用户ID: 10
16:59:04.828 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 11， 用户ID: 11
16:59:04.894 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:0， field: 12， 用户ID: 12
16:59:04.960 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:1， field: 13， 用户ID: 13
16:59:05.027 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 14， 用户ID: 14
16:59:05.087 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:0， field: 15， 用户ID: 15
16:59:05.167 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:1， field: 16， 用户ID: 16
16:59:05.238 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 17， 用户ID: 17
16:59:05.298 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 18， 用户ID: 18
16:59:05.362 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:1， field: 19， 用户ID: 19
16:59:05.427 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 20， 用户ID: 20
16:59:05.488 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 21， 用户ID: 21
16:59:05.550 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:1， field: 22， 用户ID: 22
16:59:05.613 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 23， 用户ID: 23
16:59:05.613 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
17:00:01.061 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
17:00:01.063 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
17:00:01.121 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
17:00:01.249 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储所有用户数据到 Redis key: users
17:00:01.317 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:1，用户ID: 1
17:00:01.380 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:2，用户ID: 2
17:00:01.443 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:3，用户ID: 3
17:00:01.503 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:4，用户ID: 4
17:00:01.565 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:5，用户ID: 5
17:00:01.646 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:6，用户ID: 6
17:00:01.709 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:7，用户ID: 7
17:00:01.776 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:8，用户ID: 8
17:00:02.418 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:9，用户ID: 9
17:00:02.479 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:10，用户ID: 10
17:00:02.539 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:11，用户ID: 11
17:00:02.603 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:12，用户ID: 12
17:00:02.663 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:13，用户ID: 13
17:00:02.737 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:14，用户ID: 14
17:00:02.803 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:15，用户ID: 15
17:00:02.863 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:16，用户ID: 16
17:00:02.924 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:17，用户ID: 17
17:00:02.988 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:18，用户ID: 18
17:00:03.052 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:19，用户ID: 19
17:00:03.133 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:20，用户ID: 20
17:00:03.201 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:21，用户ID: 21
17:00:03.267 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:22，用户ID: 22
17:00:03.338 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:23，用户ID: 23
17:00:03.399 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 1， 用户ID: 1
17:00:03.463 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 2， 用户ID: 2
17:00:03.524 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 3， 用户ID: 3
17:00:03.585 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 4， 用户ID: 4
17:00:03.647 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:2， field: 5， 用户ID: 5
17:00:03.708 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:0， field: 6， 用户ID: 6
17:00:03.774 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 7， 用户ID: 7
17:00:03.839 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:2， field: 8， 用户ID: 8
17:00:03.902 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:0， field: 9， 用户ID: 9
17:00:03.966 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 10， 用户ID: 10
17:00:04.029 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 11， 用户ID: 11
17:00:04.089 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:0， field: 12， 用户ID: 12
17:00:04.149 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:1， field: 13， 用户ID: 13
17:00:04.218 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 14， 用户ID: 14
17:00:04.278 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:0， field: 15， 用户ID: 15
17:00:04.338 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:1， field: 16， 用户ID: 16
17:00:04.401 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 17， 用户ID: 17
17:00:04.460 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 18， 用户ID: 18
17:00:04.545 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:1， field: 19， 用户ID: 19
17:00:04.607 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 20， 用户ID: 20
17:00:04.671 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 21， 用户ID: 21
17:00:04.732 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:1， field: 22， 用户ID: 22
17:00:04.792 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 23， 用户ID: 23
17:00:04.792 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
17:01:01.075 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
17:01:01.078 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
17:01:01.158 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
17:01:01.290 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储所有用户数据到 Redis key: users
17:01:01.356 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:1，用户ID: 1
17:01:01.417 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:2，用户ID: 2
17:01:01.482 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:3，用户ID: 3
17:01:01.543 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:4，用户ID: 4
17:01:01.604 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:5，用户ID: 5
17:01:01.681 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:6，用户ID: 6
17:01:01.748 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:7，用户ID: 7
17:01:01.808 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:8，用户ID: 8
17:01:01.870 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:9，用户ID: 9
17:01:01.933 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:10，用户ID: 10
17:01:01.998 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:11，用户ID: 11
17:01:02.058 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:12，用户ID: 12
17:01:02.120 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:13，用户ID: 13
17:01:02.183 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:14，用户ID: 14
17:01:02.248 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:15，用户ID: 15
17:01:02.310 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:16，用户ID: 16
17:01:02.376 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:17，用户ID: 17
17:01:02.439 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:18，用户ID: 18
17:01:02.510 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:19，用户ID: 19
17:01:02.575 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:20，用户ID: 20
17:01:02.636 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:21，用户ID: 21
17:01:02.700 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:22，用户ID: 22
17:01:02.763 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:23，用户ID: 23
17:01:02.826 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 1， 用户ID: 1
17:01:02.891 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 2， 用户ID: 2
17:01:02.954 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 3， 用户ID: 3
17:01:03.017 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 4， 用户ID: 4
17:01:03.090 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:2， field: 5， 用户ID: 5
17:01:03.152 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:0， field: 6， 用户ID: 6
17:01:03.213 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 7， 用户ID: 7
17:01:03.272 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:2， field: 8， 用户ID: 8
17:01:03.334 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:0， field: 9， 用户ID: 9
17:01:03.397 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:normal:1， field: 10， 用户ID: 10
17:01:03.459 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 11， 用户ID: 11
17:01:03.530 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:0， field: 12， 用户ID: 12
17:01:03.590 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:1， field: 13， 用户ID: 13
17:01:03.651 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:2， field: 14， 用户ID: 14
17:01:03.711 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:0， field: 15， 用户ID: 15
17:01:03.774 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip:1， field: 16， 用户ID: 16
17:01:03.840 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 17， 用户ID: 17
17:01:03.899 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 18， 用户ID: 18
17:01:03.959 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:1， field: 19， 用户ID: 19
17:01:04.021 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 20， 用户ID: 20
17:01:04.087 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:0， field: 21， 用户ID: 21
17:01:04.150 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:1， field: 22， 用户ID: 22
17:01:04.209 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: user:hash:vip_plus:2， field: 23， 用户ID: 23
17:01:04.210 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
17:01:16.497 [SpringApplicationShutdownHook] INFO  o.s.boot.web.embedded.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
20:17:39.105 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
20:17:39.123 [main] INFO  com.example.demo.DemoApplication - Starting DemoApplication using Java 17.0.11 with PID 77837 (/Users/bootscoder/Downloads/redispractice/demo/target/classes started by bootscoder in /Users/bootscoder/Downloads/redispractice/demo)
20:17:39.123 [main] DEBUG com.example.demo.DemoApplication - Running with Spring Boot v3.4.4, Spring v6.2.5
20:17:39.123 [main] INFO  com.example.demo.DemoApplication - No active profile set, falling back to 1 default profile: "default"
20:17:39.482 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
20:17:39.484 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
20:17:39.492 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 2 ms. Found 0 Redis repository interfaces.
20:17:39.695 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 9999 (http)
20:17:39.699 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-9999"]
20:17:39.699 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
20:17:39.699 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.39]
20:17:39.719 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/bootscoder] - Initializing Spring embedded WebApplicationContext
20:17:39.719 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 580 ms
20:17:39.975 [main] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
20:17:40.177 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 14 endpoints beneath base path '/actuator'
20:17:40.200 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-9999"]
20:17:40.206 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 9999 (http) with context path '/bootscoder'
20:17:40.215 [main] INFO  com.example.demo.DemoApplication - Started DemoApplication in 1.238 seconds (process running for 1.523)
20:17:40.406 [RMI TCP Connection(3)-192.168.1.3] INFO  o.a.c.c.C.[Tomcat].[localhost].[/bootscoder] - Initializing Spring DispatcherServlet 'dispatcherServlet'
20:17:40.407 [RMI TCP Connection(3)-192.168.1.3] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
20:17:40.407 [RMI TCP Connection(2)-192.168.1.3] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
20:17:40.408 [RMI TCP Connection(3)-192.168.1.3] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
20:17:41.177 [RMI TCP Connection(2)-192.168.1.3] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4f5ec9a8
20:17:41.180 [RMI TCP Connection(2)-192.168.1.3] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
20:17:50.085 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
20:17:50.105 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
20:17:50.183 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
20:17:50.484 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储所有用户数据到 Redis key: users
20:17:50.551 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:1，用户ID: 1
20:17:50.618 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:2，用户ID: 2
20:17:50.687 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:3，用户ID: 3
20:17:50.754 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:4，用户ID: 4
20:17:50.819 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:5，用户ID: 5
20:17:50.886 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:6，用户ID: 6
20:17:50.959 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:7，用户ID: 7
20:17:51.036 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:8，用户ID: 8
20:17:51.107 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:9，用户ID: 9
20:17:51.170 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:10，用户ID: 10
20:17:51.238 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:11，用户ID: 11
20:17:51.309 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:12，用户ID: 12
20:17:51.372 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:13，用户ID: 13
20:17:51.438 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:14，用户ID: 14
20:17:51.506 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:15，用户ID: 15
20:17:51.573 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:16，用户ID: 16
20:17:51.646 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:17，用户ID: 17
20:17:51.719 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:18，用户ID: 18
20:17:51.782 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:19，用户ID: 19
20:17:51.846 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:20，用户ID: 20
20:17:51.927 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:21，用户ID: 21
20:17:51.992 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:22，用户ID: 22
20:17:52.057 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:23，用户ID: 23
20:17:52.068 [scheduling-1] ERROR com.example.demo.scheduleTask.RedisFlushTask - 将用户数据存入Redis时发生错误
com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: com.example.demo.entity.User["createdAt"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1340)
	at com.fasterxml.jackson.databind.ser.impl.UnsupportedTypeSerializer.serialize(UnsupportedTypeSerializer.java:35)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:770)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:184)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:502)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:341)
	at com.fasterxml.jackson.databind.ObjectMapper._writeValueAndClose(ObjectMapper.java:4819)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(ObjectMapper.java:4060)
	at com.example.demo.scheduleTask.RedisFlushTask.flushUsersToRedis(RedisFlushTask.java:72)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.runInternal(ScheduledMethodRunnable.java:130)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.lambda$run$2(ScheduledMethodRunnable.java:124)
	at io.micrometer.observation.Observation.observe(Observation.java:498)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.run(ScheduledMethodRunnable.java:124)
	at org.springframework.scheduling.config.Task$OutcomeTrackingRunnable.run(Task.java:85)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at org.springframework.scheduling.concurrent.ReschedulingRunnable.run(ReschedulingRunnable.java:96)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:842)
20:17:52.072 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
20:18:00.058 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
20:18:00.061 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
20:18:00.119 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
20:18:00.184 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储所有用户数据到 Redis key: users
20:18:00.250 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:1，用户ID: 1
20:18:00.323 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:2，用户ID: 2
20:18:00.417 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:3，用户ID: 3
20:18:00.514 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:4，用户ID: 4
20:18:00.578 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:5，用户ID: 5
20:18:00.648 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:6，用户ID: 6
20:18:00.719 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:7，用户ID: 7
20:18:00.790 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:8，用户ID: 8
20:18:00.853 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:9，用户ID: 9
20:18:00.953 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:10，用户ID: 10
20:18:01.014 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:11，用户ID: 11
20:18:01.079 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:12，用户ID: 12
20:18:01.145 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:13，用户ID: 13
20:18:01.208 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:14，用户ID: 14
20:18:01.276 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:15，用户ID: 15
20:18:01.341 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:16，用户ID: 16
20:18:01.405 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:17，用户ID: 17
20:18:01.467 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:18，用户ID: 18
20:18:01.534 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:19，用户ID: 19
20:18:01.601 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:20，用户ID: 20
20:18:01.668 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:21，用户ID: 21
20:18:01.733 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:22，用户ID: 22
20:18:01.796 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:23，用户ID: 23
20:18:01.797 [scheduling-1] ERROR com.example.demo.scheduleTask.RedisFlushTask - 将用户数据存入Redis时发生错误
com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: com.example.demo.entity.User["createdAt"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1340)
	at com.fasterxml.jackson.databind.ser.impl.UnsupportedTypeSerializer.serialize(UnsupportedTypeSerializer.java:35)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:770)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:184)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:502)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:341)
	at com.fasterxml.jackson.databind.ObjectMapper._writeValueAndClose(ObjectMapper.java:4819)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(ObjectMapper.java:4060)
	at com.example.demo.scheduleTask.RedisFlushTask.flushUsersToRedis(RedisFlushTask.java:72)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.runInternal(ScheduledMethodRunnable.java:130)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.lambda$run$2(ScheduledMethodRunnable.java:124)
	at io.micrometer.observation.Observation.observe(Observation.java:498)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.run(ScheduledMethodRunnable.java:124)
	at org.springframework.scheduling.config.Task$OutcomeTrackingRunnable.run(Task.java:85)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at org.springframework.scheduling.concurrent.ReschedulingRunnable.run(ReschedulingRunnable.java:96)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:842)
20:18:01.798 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
20:18:10.052 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
20:18:10.052 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
20:18:10.107 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
20:18:10.173 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储所有用户数据到 Redis key: users
20:18:10.253 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:1，用户ID: 1
20:18:10.319 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:2，用户ID: 2
20:18:10.389 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:3，用户ID: 3
20:18:10.457 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:4，用户ID: 4
20:18:10.538 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:5，用户ID: 5
20:18:10.619 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:6，用户ID: 6
20:18:10.685 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:7，用户ID: 7
20:18:10.758 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:8，用户ID: 8
20:18:10.847 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:9，用户ID: 9
20:18:10.909 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:10，用户ID: 10
20:18:10.978 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:11，用户ID: 11
20:18:11.042 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:12，用户ID: 12
20:18:11.106 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:13，用户ID: 13
20:18:11.174 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:14，用户ID: 14
20:18:11.235 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:15，用户ID: 15
20:18:11.296 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:16，用户ID: 16
20:18:11.362 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:17，用户ID: 17
20:18:11.444 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:18，用户ID: 18
20:18:11.508 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:19，用户ID: 19
20:18:11.579 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:20，用户ID: 20
20:18:11.647 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:21，用户ID: 21
20:18:11.732 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:22，用户ID: 22
20:18:11.799 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:23，用户ID: 23
20:18:11.800 [scheduling-1] ERROR com.example.demo.scheduleTask.RedisFlushTask - 将用户数据存入Redis时发生错误
com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: com.example.demo.entity.User["createdAt"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1340)
	at com.fasterxml.jackson.databind.ser.impl.UnsupportedTypeSerializer.serialize(UnsupportedTypeSerializer.java:35)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:770)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:184)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:502)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:341)
	at com.fasterxml.jackson.databind.ObjectMapper._writeValueAndClose(ObjectMapper.java:4819)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(ObjectMapper.java:4060)
	at com.example.demo.scheduleTask.RedisFlushTask.flushUsersToRedis(RedisFlushTask.java:72)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.runInternal(ScheduledMethodRunnable.java:130)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.lambda$run$2(ScheduledMethodRunnable.java:124)
	at io.micrometer.observation.Observation.observe(Observation.java:498)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.run(ScheduledMethodRunnable.java:124)
	at org.springframework.scheduling.config.Task$OutcomeTrackingRunnable.run(Task.java:85)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at org.springframework.scheduling.concurrent.ReschedulingRunnable.run(ReschedulingRunnable.java:96)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:842)
20:18:11.801 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
20:18:20.070 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
20:18:20.071 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
20:18:20.136 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
20:18:20.205 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储所有用户数据到 Redis key: users
20:18:20.269 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:1，用户ID: 1
20:18:20.333 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:2，用户ID: 2
20:18:20.398 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:3，用户ID: 3
20:18:20.463 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:4，用户ID: 4
20:18:20.526 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:5，用户ID: 5
20:18:20.622 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:6，用户ID: 6
20:18:20.688 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:7，用户ID: 7
20:18:20.757 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:8，用户ID: 8
20:18:20.820 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:9，用户ID: 9
20:18:20.910 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:10，用户ID: 10
20:18:20.976 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:11，用户ID: 11
20:18:21.043 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:12，用户ID: 12
20:18:21.108 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:13，用户ID: 13
20:18:21.172 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:14，用户ID: 14
20:18:21.238 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:15，用户ID: 15
20:18:21.305 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:16，用户ID: 16
20:18:21.374 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:17，用户ID: 17
20:18:21.438 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:18，用户ID: 18
20:18:21.504 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:19，用户ID: 19
20:18:21.570 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:20，用户ID: 20
20:18:21.642 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:21，用户ID: 21
20:18:21.706 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:22，用户ID: 22
20:18:21.770 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:23，用户ID: 23
20:18:21.771 [scheduling-1] ERROR com.example.demo.scheduleTask.RedisFlushTask - 将用户数据存入Redis时发生错误
com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: com.example.demo.entity.User["createdAt"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1340)
	at com.fasterxml.jackson.databind.ser.impl.UnsupportedTypeSerializer.serialize(UnsupportedTypeSerializer.java:35)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:770)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:184)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:502)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:341)
	at com.fasterxml.jackson.databind.ObjectMapper._writeValueAndClose(ObjectMapper.java:4819)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(ObjectMapper.java:4060)
	at com.example.demo.scheduleTask.RedisFlushTask.flushUsersToRedis(RedisFlushTask.java:72)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.runInternal(ScheduledMethodRunnable.java:130)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.lambda$run$2(ScheduledMethodRunnable.java:124)
	at io.micrometer.observation.Observation.observe(Observation.java:498)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.run(ScheduledMethodRunnable.java:124)
	at org.springframework.scheduling.config.Task$OutcomeTrackingRunnable.run(Task.java:85)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at org.springframework.scheduling.concurrent.ReschedulingRunnable.run(ReschedulingRunnable.java:96)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:842)
20:18:21.772 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
20:18:30.058 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
20:18:30.059 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
20:18:30.110 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
20:18:30.173 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储所有用户数据到 Redis key: users
20:18:30.239 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:1，用户ID: 1
20:18:30.302 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:2，用户ID: 2
20:18:30.366 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:3，用户ID: 3
20:18:30.431 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:4，用户ID: 4
20:18:30.496 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:5，用户ID: 5
20:18:30.560 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:6，用户ID: 6
20:18:30.632 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:7，用户ID: 7
20:18:30.697 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:8，用户ID: 8
20:18:30.765 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:9，用户ID: 9
20:18:31.065 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:10，用户ID: 10
20:18:31.133 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:11，用户ID: 11
20:18:31.201 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:12，用户ID: 12
20:18:31.265 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:13，用户ID: 13
20:18:31.564 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:14，用户ID: 14
20:18:31.629 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:15，用户ID: 15
20:18:31.693 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:16，用户ID: 16
20:18:31.759 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:17，用户ID: 17
20:18:31.835 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:18，用户ID: 18
20:18:31.898 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:19，用户ID: 19
20:18:31.963 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:20，用户ID: 20
20:18:32.027 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:21，用户ID: 21
20:18:32.091 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:22，用户ID: 22
20:18:32.152 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:23，用户ID: 23
20:18:32.153 [scheduling-1] ERROR com.example.demo.scheduleTask.RedisFlushTask - 将用户数据存入Redis时发生错误
com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: com.example.demo.entity.User["createdAt"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1340)
	at com.fasterxml.jackson.databind.ser.impl.UnsupportedTypeSerializer.serialize(UnsupportedTypeSerializer.java:35)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:770)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:184)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:502)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:341)
	at com.fasterxml.jackson.databind.ObjectMapper._writeValueAndClose(ObjectMapper.java:4819)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(ObjectMapper.java:4060)
	at com.example.demo.scheduleTask.RedisFlushTask.flushUsersToRedis(RedisFlushTask.java:72)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.runInternal(ScheduledMethodRunnable.java:130)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.lambda$run$2(ScheduledMethodRunnable.java:124)
	at io.micrometer.observation.Observation.observe(Observation.java:498)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.run(ScheduledMethodRunnable.java:124)
	at org.springframework.scheduling.config.Task$OutcomeTrackingRunnable.run(Task.java:85)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at org.springframework.scheduling.concurrent.ReschedulingRunnable.run(ReschedulingRunnable.java:96)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:842)
20:18:32.154 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
20:18:40.048 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
20:18:40.049 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
20:18:40.102 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
20:18:40.169 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储所有用户数据到 Redis key: users
20:18:40.249 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:1，用户ID: 1
20:18:40.314 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:2，用户ID: 2
20:18:40.376 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:3，用户ID: 3
20:18:40.439 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:4，用户ID: 4
20:18:40.502 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:5，用户ID: 5
20:18:40.565 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:6，用户ID: 6
20:18:40.626 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:7，用户ID: 7
20:18:40.688 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:8，用户ID: 8
20:18:40.759 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:9，用户ID: 9
20:18:40.832 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:10，用户ID: 10
20:18:40.896 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:11，用户ID: 11
20:18:40.966 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:12，用户ID: 12
20:18:41.031 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:13，用户ID: 13
20:18:41.094 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:14，用户ID: 14
20:18:41.158 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:15，用户ID: 15
20:18:41.219 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:16，用户ID: 16
20:18:41.288 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:17，用户ID: 17
20:18:41.356 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:18，用户ID: 18
20:18:41.434 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:19，用户ID: 19
20:18:41.499 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:20，用户ID: 20
20:18:41.563 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:21，用户ID: 21
20:18:41.626 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:22，用户ID: 22
20:18:41.689 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:23，用户ID: 23
20:18:41.690 [scheduling-1] ERROR com.example.demo.scheduleTask.RedisFlushTask - 将用户数据存入Redis时发生错误
com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: com.example.demo.entity.User["createdAt"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1340)
	at com.fasterxml.jackson.databind.ser.impl.UnsupportedTypeSerializer.serialize(UnsupportedTypeSerializer.java:35)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:770)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:184)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:502)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:341)
	at com.fasterxml.jackson.databind.ObjectMapper._writeValueAndClose(ObjectMapper.java:4819)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(ObjectMapper.java:4060)
	at com.example.demo.scheduleTask.RedisFlushTask.flushUsersToRedis(RedisFlushTask.java:72)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.runInternal(ScheduledMethodRunnable.java:130)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.lambda$run$2(ScheduledMethodRunnable.java:124)
	at io.micrometer.observation.Observation.observe(Observation.java:498)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.run(ScheduledMethodRunnable.java:124)
	at org.springframework.scheduling.config.Task$OutcomeTrackingRunnable.run(Task.java:85)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at org.springframework.scheduling.concurrent.ReschedulingRunnable.run(ReschedulingRunnable.java:96)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:842)
20:18:41.690 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
20:18:50.046 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
20:18:50.047 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
20:18:50.108 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
20:18:50.174 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储所有用户数据到 Redis key: users
20:18:50.242 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:1，用户ID: 1
20:18:50.334 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:2，用户ID: 2
20:18:50.396 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:3，用户ID: 3
20:18:50.459 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:4，用户ID: 4
20:18:50.524 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:5，用户ID: 5
20:18:50.591 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:6，用户ID: 6
20:18:50.657 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:7，用户ID: 7
20:18:50.739 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:8，用户ID: 8
20:18:50.803 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:9，用户ID: 9
20:18:50.866 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:10，用户ID: 10
20:18:50.932 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:11，用户ID: 11
20:18:50.999 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:12，用户ID: 12
20:18:51.070 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:13，用户ID: 13
20:18:51.136 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:14，用户ID: 14
20:18:51.201 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:15，用户ID: 15
20:18:51.273 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:16，用户ID: 16
20:18:51.343 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:17，用户ID: 17
20:18:51.408 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:18，用户ID: 18
20:18:51.477 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:19，用户ID: 19
20:18:51.543 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:20，用户ID: 20
20:18:51.607 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:21，用户ID: 21
20:18:51.673 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:22，用户ID: 22
20:18:51.740 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:23，用户ID: 23
20:18:51.741 [scheduling-1] ERROR com.example.demo.scheduleTask.RedisFlushTask - 将用户数据存入Redis时发生错误
com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: com.example.demo.entity.User["createdAt"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1340)
	at com.fasterxml.jackson.databind.ser.impl.UnsupportedTypeSerializer.serialize(UnsupportedTypeSerializer.java:35)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:770)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:184)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:502)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:341)
	at com.fasterxml.jackson.databind.ObjectMapper._writeValueAndClose(ObjectMapper.java:4819)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(ObjectMapper.java:4060)
	at com.example.demo.scheduleTask.RedisFlushTask.flushUsersToRedis(RedisFlushTask.java:72)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.runInternal(ScheduledMethodRunnable.java:130)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.lambda$run$2(ScheduledMethodRunnable.java:124)
	at io.micrometer.observation.Observation.observe(Observation.java:498)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.run(ScheduledMethodRunnable.java:124)
	at org.springframework.scheduling.config.Task$OutcomeTrackingRunnable.run(Task.java:85)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at org.springframework.scheduling.concurrent.ReschedulingRunnable.run(ReschedulingRunnable.java:96)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:842)
20:18:51.741 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
20:18:56.938 [SpringApplicationShutdownHook] INFO  o.s.boot.web.embedded.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
20:21:29.992 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
20:21:30.009 [main] INFO  com.example.demo.DemoApplication - Starting DemoApplication using Java 17.0.11 with PID 77959 (/Users/bootscoder/Downloads/redispractice/demo/target/classes started by bootscoder in /Users/bootscoder/Downloads/redispractice/demo)
20:21:30.009 [main] DEBUG com.example.demo.DemoApplication - Running with Spring Boot v3.4.4, Spring v6.2.5
20:21:30.009 [main] INFO  com.example.demo.DemoApplication - No active profile set, falling back to 1 default profile: "default"
20:21:30.533 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
20:21:30.534 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
20:21:30.543 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 2 ms. Found 0 Redis repository interfaces.
20:21:30.774 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 9999 (http)
20:21:30.778 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-9999"]
20:21:30.779 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
20:21:30.779 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.39]
20:21:30.802 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/bootscoder] - Initializing Spring embedded WebApplicationContext
20:21:30.802 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 772 ms
20:21:31.021 [main] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
20:21:31.428 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 14 endpoints beneath base path '/actuator'
20:21:31.470 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-9999"]
20:21:31.479 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 9999 (http) with context path '/bootscoder'
20:21:31.492 [main] INFO  com.example.demo.DemoApplication - Started DemoApplication in 1.626 seconds (process running for 1.844)
20:21:31.921 [RMI TCP Connection(2)-192.168.1.3] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
20:21:31.921 [RMI TCP Connection(3)-192.168.1.3] INFO  o.a.c.c.C.[Tomcat].[localhost].[/bootscoder] - Initializing Spring DispatcherServlet 'dispatcherServlet'
20:21:31.921 [RMI TCP Connection(3)-192.168.1.3] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
20:21:31.922 [RMI TCP Connection(3)-192.168.1.3] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
20:21:32.617 [RMI TCP Connection(2)-192.168.1.3] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@2d695428
20:21:32.622 [RMI TCP Connection(2)-192.168.1.3] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
20:21:40.084 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
20:21:40.105 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
20:21:40.182 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
20:21:40.442 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储所有用户数据到 Redis key: users
20:21:40.497 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:1，用户ID: 1
20:21:40.553 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:2，用户ID: 2
20:21:40.611 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:3，用户ID: 3
20:21:40.674 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:4，用户ID: 4
20:21:40.732 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:5，用户ID: 5
20:21:40.791 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:6，用户ID: 6
20:21:40.847 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:7，用户ID: 7
20:21:40.906 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:8，用户ID: 8
20:21:40.963 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:9，用户ID: 9
20:21:41.020 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:10，用户ID: 10
20:21:41.076 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:11，用户ID: 11
20:21:41.133 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:12，用户ID: 12
20:21:41.206 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:13，用户ID: 13
20:21:41.264 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:14，用户ID: 14
20:21:41.319 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:15，用户ID: 15
20:21:41.376 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:16，用户ID: 16
20:21:41.434 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:17，用户ID: 17
20:21:41.497 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:18，用户ID: 18
20:21:41.556 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:19，用户ID: 19
20:21:41.610 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:20，用户ID: 20
20:21:41.664 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:21，用户ID: 21
20:21:41.720 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:22，用户ID: 22
20:21:41.777 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:23，用户ID: 23
20:21:41.845 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:1， field: 1， 用户ID: 1
20:21:41.902 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip:2， field: 2， 用户ID: 2
20:21:41.957 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:0， field: 3， 用户ID: 3
20:21:42.015 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:1， field: 4， 用户ID: 4
20:21:42.069 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:2， field: 5， 用户ID: 5
20:21:42.124 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:0， field: 6， 用户ID: 6
20:21:42.182 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:1， field: 7， 用户ID: 7
20:21:42.239 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:2， field: 8， 用户ID: 8
20:21:42.294 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:0， field: 9， 用户ID: 9
20:21:42.350 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:1， field: 10， 用户ID: 10
20:21:42.415 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip:2， field: 11， 用户ID: 11
20:21:42.473 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip:0， field: 12， 用户ID: 12
20:21:42.527 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip:1， field: 13， 用户ID: 13
20:21:42.583 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip:2， field: 14， 用户ID: 14
20:21:42.642 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip:0， field: 15， 用户ID: 15
20:21:42.700 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip:1， field: 16， 用户ID: 16
20:21:42.758 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:2， field: 17， 用户ID: 17
20:21:42.815 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:0， field: 18， 用户ID: 18
20:21:42.875 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:1， field: 19， 用户ID: 19
20:21:42.932 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:2， field: 20， 用户ID: 20
20:21:43.018 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:0， field: 21， 用户ID: 21
20:21:43.081 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:1， field: 22， 用户ID: 22
20:21:43.137 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:2， field: 23， 用户ID: 23
20:21:43.137 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
20:21:50.080 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
20:21:50.081 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
20:21:50.163 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
20:21:50.305 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储所有用户数据到 Redis key: users
20:21:50.384 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:1，用户ID: 1
20:21:50.442 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:2，用户ID: 2
20:21:50.509 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:3，用户ID: 3
20:21:50.567 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:4，用户ID: 4
20:21:50.628 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:5，用户ID: 5
20:21:50.928 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:6，用户ID: 6
20:21:50.984 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:7，用户ID: 7
20:21:51.041 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:8，用户ID: 8
20:21:51.103 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:9，用户ID: 9
20:21:51.161 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:10，用户ID: 10
20:21:51.226 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:11，用户ID: 11
20:21:51.285 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:12，用户ID: 12
20:21:51.349 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:13，用户ID: 13
20:21:51.412 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:14，用户ID: 14
20:21:51.470 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:15，用户ID: 15
20:21:51.532 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:16，用户ID: 16
20:21:51.591 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:17，用户ID: 17
20:21:51.650 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:18，用户ID: 18
20:21:51.707 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:19，用户ID: 19
20:21:51.766 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:20，用户ID: 20
20:21:51.829 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:21，用户ID: 21
20:21:51.889 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:22，用户ID: 22
20:21:51.944 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:23，用户ID: 23
20:21:51.978 [SpringApplicationShutdownHook] INFO  o.s.boot.web.embedded.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
20:21:52.014 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:1， field: 1， 用户ID: 1
20:21:52.069 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip:2， field: 2， 用户ID: 2
20:21:52.123 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:0， field: 3， 用户ID: 3
20:21:52.185 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:1， field: 4， 用户ID: 4
20:21:52.252 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:2， field: 5， 用户ID: 5
20:21:52.309 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:0， field: 6， 用户ID: 6
20:21:52.369 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:1， field: 7， 用户ID: 7
20:21:52.428 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:2， field: 8， 用户ID: 8
20:21:52.489 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:0， field: 9， 用户ID: 9
20:21:52.550 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:1， field: 10， 用户ID: 10
20:21:52.606 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip:2， field: 11， 用户ID: 11
20:21:52.662 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip:0， field: 12， 用户ID: 12
20:21:52.723 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip:1， field: 13， 用户ID: 13
20:21:52.782 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip:2， field: 14， 用户ID: 14
20:21:52.838 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip:0， field: 15， 用户ID: 15
20:21:52.904 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip:1， field: 16， 用户ID: 16
20:21:52.972 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:2， field: 17， 用户ID: 17
20:21:53.032 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:0， field: 18， 用户ID: 18
20:21:53.093 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:1， field: 19， 用户ID: 19
20:21:53.157 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:2， field: 20， 用户ID: 20
20:21:53.239 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:0， field: 21， 用户ID: 21
20:21:53.297 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:1， field: 22， 用户ID: 22
20:21:53.353 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:2， field: 23， 用户ID: 23
20:21:53.354 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
20:21:53.993 [tomcat-shutdown] INFO  o.s.boot.web.embedded.tomcat.GracefulShutdown - Graceful shutdown complete
20:21:54.130 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
20:21:54.141 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
20:29:10.862 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
20:29:10.879 [main] INFO  com.example.demo.DemoApplication - Starting DemoApplication using Java 17.0.11 with PID 78110 (/Users/bootscoder/Downloads/redispractice/demo/target/classes started by bootscoder in /Users/bootscoder/Downloads/redispractice/demo)
20:29:10.879 [main] DEBUG com.example.demo.DemoApplication - Running with Spring Boot v3.4.4, Spring v6.2.5
20:29:10.880 [main] INFO  com.example.demo.DemoApplication - No active profile set, falling back to 1 default profile: "default"
20:29:11.202 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
20:29:11.203 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
20:29:11.211 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 2 ms. Found 0 Redis repository interfaces.
20:29:11.417 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 9999 (http)
20:29:11.421 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-9999"]
20:29:11.422 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
20:29:11.422 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.39]
20:29:11.438 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/bootscoder] - Initializing Spring embedded WebApplicationContext
20:29:11.438 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 544 ms
20:29:11.662 [main] INFO  o.s.b.a.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
20:29:11.854 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 14 endpoints beneath base path '/actuator'
20:29:11.877 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-9999"]
20:29:11.883 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 9999 (http) with context path '/bootscoder'
20:29:11.892 [main] INFO  com.example.demo.DemoApplication - Started DemoApplication in 1.143 seconds (process running for 1.403)
20:29:12.227 [RMI TCP Connection(2)-192.168.1.3] INFO  o.a.c.c.C.[Tomcat].[localhost].[/bootscoder] - Initializing Spring DispatcherServlet 'dispatcherServlet'
20:29:12.228 [RMI TCP Connection(2)-192.168.1.3] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
20:29:12.228 [RMI TCP Connection(3)-192.168.1.3] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
20:29:12.230 [RMI TCP Connection(2)-192.168.1.3] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 2 ms
20:29:13.038 [RMI TCP Connection(3)-192.168.1.3] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@58f5cbe
20:29:13.044 [RMI TCP Connection(3)-192.168.1.3] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
20:29:20.108 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
20:29:20.118 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
20:29:20.205 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
20:29:20.497 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储所有用户数据到 Redis key: users
20:29:20.566 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:1，用户ID: 1
20:29:20.639 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:2，用户ID: 2
20:29:20.705 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:3，用户ID: 3
20:29:20.774 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:4，用户ID: 4
20:29:20.839 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:5，用户ID: 5
20:29:20.914 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:6，用户ID: 6
20:29:20.980 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:7，用户ID: 7
20:29:21.046 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:8，用户ID: 8
20:29:21.109 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:9，用户ID: 9
20:29:21.177 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:10，用户ID: 10
20:29:21.239 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:11，用户ID: 11
20:29:21.306 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:12，用户ID: 12
20:29:21.371 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:13，用户ID: 13
20:29:21.438 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:14，用户ID: 14
20:29:21.506 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:15，用户ID: 15
20:29:21.570 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:16，用户ID: 16
20:29:21.635 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:17，用户ID: 17
20:29:21.703 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:18，用户ID: 18
20:29:21.763 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:19，用户ID: 19
20:29:22.002 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:20，用户ID: 20
20:29:22.123 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:21，用户ID: 21
20:29:22.292 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:22，用户ID: 22
20:29:22.445 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:23，用户ID: 23
20:29:22.712 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:1， field: 1， 用户ID: 1
20:29:22.886 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip:2， field: 2， 用户ID: 2
20:29:23.175 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:0， field: 3， 用户ID: 3
20:29:23.446 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:1， field: 4， 用户ID: 4
20:29:23.701 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:2， field: 5， 用户ID: 5
20:29:23.775 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:0， field: 6， 用户ID: 6
20:29:23.850 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:1， field: 7， 用户ID: 7
20:29:23.960 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:2， field: 8， 用户ID: 8
20:29:24.068 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:0， field: 9， 用户ID: 9
20:29:24.130 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:1， field: 10， 用户ID: 10
20:29:24.193 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip:2， field: 11， 用户ID: 11
20:29:24.255 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip:0， field: 12， 用户ID: 12
20:29:24.317 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip:1， field: 13， 用户ID: 13
20:29:24.381 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip:2， field: 14， 用户ID: 14
20:29:24.443 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip:0， field: 15， 用户ID: 15
20:29:24.516 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip:1， field: 16， 用户ID: 16
20:29:24.580 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:2， field: 17， 用户ID: 17
20:29:24.644 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:0， field: 18， 用户ID: 18
20:29:24.709 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:1， field: 19， 用户ID: 19
20:29:24.777 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:2， field: 20， 用户ID: 20
20:29:24.843 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:0， field: 21， 用户ID: 21
20:29:24.908 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:1， field: 22， 用户ID: 22
20:29:24.974 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:2， field: 23， 用户ID: 23
20:29:24.974 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
20:29:29.772 [SpringApplicationShutdownHook] INFO  o.s.boot.web.embedded.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
20:29:30.066 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==>  Preparing: select * from users
20:29:30.067 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - ==> Parameters: 
20:29:30.135 [scheduling-1] DEBUG com.example.demo.mapper.UserMapper.findAll - <==      Total: 23
20:29:30.205 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储所有用户数据到 Redis key: users
20:29:30.273 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:1，用户ID: 1
20:29:30.337 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:2，用户ID: 2
20:29:30.401 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:3，用户ID: 3
20:29:30.469 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:4，用户ID: 4
20:29:30.535 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:5，用户ID: 5
20:29:30.629 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:6，用户ID: 6
20:29:30.696 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:7，用户ID: 7
20:29:30.761 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:8，用户ID: 8
20:29:30.846 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:9，用户ID: 9
20:29:30.912 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:10，用户ID: 10
20:29:30.978 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:11，用户ID: 11
20:29:31.045 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:12，用户ID: 12
20:29:31.123 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:13，用户ID: 13
20:29:31.189 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:14，用户ID: 14
20:29:31.257 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:15，用户ID: 15
20:29:31.321 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:16，用户ID: 16
20:29:31.387 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:17，用户ID: 17
20:29:31.451 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:18，用户ID: 18
20:29:31.517 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:19，用户ID: 19
20:29:31.589 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:20，用户ID: 20
20:29:31.657 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:21，用户ID: 21
20:29:31.731 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:22，用户ID: 22
20:29:31.783 [tomcat-shutdown] INFO  o.s.boot.web.embedded.tomcat.GracefulShutdown - Graceful shutdown complete
20:29:31.795 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis key: user:23，用户ID: 23
20:29:31.860 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:1， field: 1， 用户ID: 1
20:29:31.930 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip:2， field: 2， 用户ID: 2
20:29:32.010 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:0， field: 3， 用户ID: 3
20:29:32.075 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:1， field: 4， 用户ID: 4
20:29:32.146 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:2， field: 5， 用户ID: 5
20:29:32.212 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:0， field: 6， 用户ID: 6
20:29:32.279 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:1， field: 7， 用户ID: 7
20:29:32.344 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:2， field: 8， 用户ID: 8
20:29:32.409 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:0， field: 9， 用户ID: 9
20:29:32.475 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:normal:1， field: 10， 用户ID: 10
20:29:32.547 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip:2， field: 11， 用户ID: 11
20:29:32.617 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip:0， field: 12， 用户ID: 12
20:29:32.683 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip:1， field: 13， 用户ID: 13
20:29:32.751 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip:2， field: 14， 用户ID: 14
20:29:32.815 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip:0， field: 15， 用户ID: 15
20:29:32.885 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip:1， field: 16， 用户ID: 16
20:29:32.954 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:2， field: 17， 用户ID: 17
20:29:33.017 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:0， field: 18， 用户ID: 18
20:29:33.085 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:1， field: 19， 用户ID: 19
20:29:33.150 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:2， field: 20， 用户ID: 20
20:29:33.219 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:0， field: 21， 用户ID: 21
20:29:33.284 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:1， field: 22， 用户ID: 22
20:29:33.350 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 已存储用户数据到 Redis hash key: level:vip_plus:2， field: 23， 用户ID: 23
20:29:33.350 [scheduling-1] INFO  com.example.demo.scheduleTask.RedisFlushTask - 成功将 MySQL 中的用户数据存入 Redis
20:29:33.471 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
20:29:33.477 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
